name: 'release'
on:
  push:
    branches:
      - feat/updater


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          token: '${{ secrets.AGITATOR_DISTRIBUTE_KEY_REPO_TOKEN }}'
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - uses: pnpm/action-setup@v4
        with:
          version: 9.9.0
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - name: Get package name from unix
        id: get_package_name_from_unix
        if: matrix.platform != 'windows-latest'
        run: |
          PACKAGE_NAME=$(npm pkg get name | tr -d '"')
          TAURI_SIGNING_PRIVATE_KEY=$(cat zerotier-toolkit-distribute-key/secret.key)
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD=$(cat zerotier-toolkit-distribute-key/password)
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD=$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" >> $GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY=$TAURI_SIGNING_PRIVATE_KEY" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Get package name from windows
        id: get_package_name_from_windows
        if: matrix.platform == 'windows-latest'
        run: |
          $packageName = (npm pkg get name).Trim('"')
          $tauriSigningPrivateKey = Get-Content -Raw zerotier-toolkit-distribute-key/secret.key
          $tauriSigningPrivateKeyPassword = Get-Content -Raw zerotier-toolkit-distribute-key/password
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD=$tauriSigningPrivateKeyPassword" >> $env:GITHUB_ENV
          echo "TAURI_SIGNING_PRIVATE_KEY=$tauriSigningPrivateKey" >> $env:GITHUB_ENV
          echo "PACKAGE_NAME=$packageName" >> $env:GITHUB_ENV
        shell: pwsh

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: ${{ env.PACKAGE_NAME }} v__VERSION__
          releaseBody: 'Bug fixes and new features.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
